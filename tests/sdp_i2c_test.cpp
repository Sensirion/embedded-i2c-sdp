/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * I2C-Generator: 0.2.0
 * Yaml Version: 0.1.0
 * Template Version: 0.7.0-32-g5b8f0ff
 */
/*
 * Copyright (c) 2021, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "i2c_mux.h"
#include "sdp_i2c.h"
#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include <inttypes.h>
#include <stdio.h>

// TODO: DRIVER_GENERATOR Remove commands which shouldn't be tested
// TODO: DRIVER_GENERATOR Adjust setup and teardown
// TODO: DRIVER_GENERATOR Adjust all tests such that pre- and post conditions
// are meet

TEST_GROUP (SDP_Tests) {
    void setup() {
        sensirion_i2c_hal_init();

        // Select MUX 1 channel 1 (TODO: DRIVER_GENERATOR choose correct mux
        // position)
        int16_t error = sensirion_i2c_mux_set_single_channel(0x71, 1);
        CHECK_EQUAL_ZERO_TEXT(error, "sensirion_i2c_mux_set_single_channel")
    }

    void teardown() {

        sensirion_i2c_hal_free();
    }
};

TEST (
    SDP_Tests,
    SDP_Test_start_continuous_measurement_with_mass_flow_t_comp_and_averaging) {
    int16_t error;
    error =
        sdp_start_continuous_measurement_with_mass_flow_t_comp_and_averaging();
    CHECK_EQUAL_ZERO_TEXT(
        error,
        "sdp_start_continuous_measurement_with_mass_flow_t_comp_and_averaging");
}

TEST (SDP_Tests, SDP_Test_start_continuous_measurement_with_mass_flow_t_comp) {
    int16_t error;
    error = sdp_start_continuous_measurement_with_mass_flow_t_comp();
    CHECK_EQUAL_ZERO_TEXT(
        error, "sdp_start_continuous_measurement_with_mass_flow_t_comp");
}

TEST (
    SDP_Tests,
    SDP_Test_start_continuous_measurement_with_diff_pressure_t_comp_and_averaging) {
    int16_t error;
    error =
        sdp_start_continuous_measurement_with_diff_pressure_t_comp_and_averaging();
    CHECK_EQUAL_ZERO_TEXT(error, "sdp_start_continuous_measurement_with_diff_"
                                 "pressure_t_comp_and_averaging");
}

TEST (SDP_Tests,
      SDP_Test_start_continuous_measurement_with_diff_pressure_t_comp) {
    int16_t error;
    error = sdp_start_continuous_measurement_with_diff_pressure_t_comp();
    CHECK_EQUAL_ZERO_TEXT(
        error, "sdp_start_continuous_measurement_with_diff_pressure_t_comp");
}

TEST (SDP_Tests, SDP_Test_stop_continuous_measurement) {
    int16_t error;
    error = sdp_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(error, "sdp_stop_continuous_measurement");
}

TEST (SDP_Tests,
      SDP_Test_trigger_measurement_with_mass_flow_t_comp_and_averaging) {
    int16_t error;
    error = sdp_trigger_measurement_with_mass_flow_t_comp_and_averaging();
    CHECK_EQUAL_ZERO_TEXT(
        error, "sdp_trigger_measurement_with_mass_flow_t_comp_and_averaging");
}

TEST (SDP_Tests, SDP_Test_trigger_measurement_with_diff_pressure_t_comp) {
    int16_t error;
    error = sdp_trigger_measurement_with_diff_pressure_t_comp();
    CHECK_EQUAL_ZERO_TEXT(error,
                          "sdp_trigger_measurement_with_diff_pressure_t_comp");
}

TEST (SDP_Tests, SDP_Test_read_measurement) {
    int16_t error;
    int16_t differential_pressure;
    int16_t temperature;
    int16_t scaling_factor;
    error = sdp_read_measurement(&differential_pressure, &temperature,
                                 &scaling_factor);
    CHECK_EQUAL_ZERO_TEXT(error, "sdp_read_measurement");
    printf("Differential pressure: %i\n", differential_pressure);
    printf("Temperature: %i\n", temperature);
    printf("Scaling factor: %i\n", scaling_factor);
}

TEST (SDP_Tests, SDP_Test_enter_sleep_mode) {
    int16_t error;
    error = sdp_enter_sleep_mode();
    CHECK_EQUAL_ZERO_TEXT(error, "sdp_enter_sleep_mode");
}

TEST (SDP_Tests, SDP_Test_exit_sleep_mode) {
    int16_t error;
    error = sdp_exit_sleep_mode();
    CHECK_EQUAL_ZERO_TEXT(error, "sdp_exit_sleep_mode");
}

TEST (SDP_Tests, SDP_Test_prepare_product_identifier) {
    int16_t error;
    error = sdp_prepare_product_identifier();
    CHECK_EQUAL_ZERO_TEXT(error, "sdp_prepare_product_identifier");
}

TEST (SDP_Tests, SDP_Test_read_product_identifier) {
    int16_t error;
    uint32_t product_number;
    uint8_t serial_number[42];
    uint8_t serial_number_size = 42;
    error = sdp_read_product_identifier(&product_number, &serial_number[0],
                                        serial_number_size);
    CHECK_EQUAL_ZERO_TEXT(error, "sdp_read_product_identifier");
    printf("Product number: %u\n", product_number);
    printf("Serial number: ");
    for (size_t i = 0; i < serial_number_size; i++) {
        printf("%u, ", serial_number[i]);
    }
    printf("\n");
}
